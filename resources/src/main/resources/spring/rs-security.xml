<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <!--
        RS(资源服务器)的安全配置, 基于SHIRO;
        这儿主要是对access_token进行消费(即使用access_token),
        将对access_token 进行效验, 以及通过access_token获取用户相关信息(如果支持)
    -->

    <!--
        凭证(access_token)的匹配使用直接比较是否相等
    -->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.SimpleCredentialsMatcher"/>

    <bean class="com.monkeyk.os.oauth.shiro.OAuth2JdbcRealm" id="jdbcRealm">
        <property name="name" value="jdbcRealm"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="permissionsLookupEnabled" value="true"/>
        <property name="rsService" ref="oAuthRSService"/>
    </bean>

    <bean class="org.apache.shiro.cache.MemoryConstrainedCacheManager" id="shiroCacheManager"/>

    <bean class="com.monkeyk.os.oauth.shiro.OAuth2SubjectFactory" id="subjectFactory"/>

    <bean class="org.apache.shiro.web.mgt.DefaultWebSecurityManager" id="securityManager">
        <property name="realm" ref="jdbcRealm"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="subjectFactory" ref="subjectFactory"/>
    </bean>

    <!--
        对于每一个对外提供的Resource(资源), 都需要在此定义, 每个资源对应不同的URL pattern.
        且有唯一的 resource id,  具体的拦截处理见 OAuth2Filter.java 类
        可根据实际需要 进行扩展
    -->
    <!--Single resource-->
    <bean class="com.monkeyk.os.oauth.shiro.OAuth2Filter" id="auth2Filter">
        <property name="resourceId" value="os-resource"/>
        <property name="rsService" ref="oAuthRSService"/>
    </bean>

    <!--mobile resource-->
    <bean class="com.monkeyk.os.oauth.shiro.OAuth2Filter" id="mobileOauth2Filter">
        <property name="resourceId" value="mobile-resource"/>
        <property name="rsService" ref="oAuthRSService"/>
    </bean>


    <!--
        SHIRO 核心配置 拦截器(或过滤器)
        扩展添加自定义的 Resource Filter(如 oauth2Filter) 用于实现对 access_token的校验与处理
        在filterChainDefinitions的配置中增加对具体 URL pattern的 OAUTH 保护拦截
        可根据实际需求进行扩展
    -->
    <bean class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" id="shiroFilter">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/index"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <property name="filters">
            <map>
                <entry key="oauth" value-ref="auth2Filter"/>
                <entry key="mOauth" value-ref="mobileOauth2Filter"/>
                <!--<entry key="oauth2" value-ref="auth2xxxFilter"/>-->
                <!--<entry key="oauth3" value-ref="auth2xxFilter"/>-->
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                # oauth
                /rs/** = oauth
                /mobile/** = mOauth
                # everything else allow
                /** = anon
            </value>
        </property>
    </bean>


</beans>